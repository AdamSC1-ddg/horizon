// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xda\x4e\x12\x7f\x9f\x4f\xb1\xea\x1b\x88\x04\x51\x20\x6d\x9a\x12\xb5\x12\x4d\xdc\x2b\x3a\x62\xda\x60\xae\xad\x4e\x27\x6b\xb1\x17\xf0\xd5\x78\x5d\xaf\x49\x93\x9e\xee\xbb\xff\xc7\x4f\xe0\x87\x5d\xaf\x4d\xec\xfc\xfb\xa6\x0a\x3b\x9e\x99\xdf\xcc\xf8\xb7\x33\xeb\xed\xf7\x4f\xfa\x7d\xf4\x85\x32\x7f\xed\x91\xf9\xd7\x29\x32\xb1\x8f\x97\x98\x11\x64\xee\xb6\x2e\xac\x9d\x9c\xcc\x15\x0d\x31\x1f\xfb\x64\x4b\x1c\x5f\xf7\xad\x2d\xa1\x3b\x1f\xbd\x47\xe7\xd7\xe1\x92\x4d\x8d\x9f\xc5\x5f\x0d\xdb\x0a\xa4\x89\x63\x50\xd3\x72\xd6\xb0\xd0\x59\x68\x9f\xae\x3a\xd7\x89\x3a\xc7\xc4\x9e\xa9\x1b\xd4\x59\x51\x6f\x0b\x12\x3a\xf3\x3d\xf8\x8f\x81\x24\x75\x62\x1d\x1b\x02\xaa\x57\x3b\xc7\xf0\x2d\xea\xe8\x4b\xd0\x44\x82\xf5\x15\xb6\x19\xc9\x98\x01\x05\xfa\x96\x30\x86\xd7\xa1\xc0\x6f\xec\x39\xa0\xeb\x3a\xf6\x9d\x60\xcf\xd8\xe8\x2e\xf6\x37\xb0\xe6\xee\x96\xb6\x65\xf4\x90\xbb\xd6\x0d\x80\x6a\xd3\x44\xcc\x24\x2b\xbc\xb3\x01\x20\x5e\xda\x84\xb9\xd8\x20\x81\xd3\x9d\xdc\xea\x6f\xcb\xdf\xe8\xd4\x32\x53\x7e\x9c\x44\x31\x54\xf1\x96\x8c\xd0\x9a\x7a\x2e\xb8\xb3\xf6\x70\xe0\x33\xbb\x46\xda\x93\x0b\x3f\x6b\xe3\x8f\x53\xe5\x1a\xcd\x01\xd2\x16\x8f\x62\x27\xae\xd1\xec\xb7\x43\xbc\x11\xea\x83\xd8\xde\xea\x08\x85\x51\xbf\xb9\x57\xc6\x9a\x12\x3d\x98\xd7\x8a\xba\x27\x08\xfe\x59\x26\xf2\xc9\xa3\x8f\xd4\x99\x86\xd4\xc5\x74\xda\x0b\x7f\xc5\xae\x0b\x41\x31\x75\xec\xa3\x20\x2b\x10\xea\xad\x8b\x02\xb7\xc3\x3f\xd1\x1f\xea\x90\x93\x53\xf0\x3a\xe3\xf6\xc6\x62\x3e\xf5\x9e\x74\x6c\x18\x74\xe7\xf8\x4c\xb7\x4c\x9d\x91\x5f\x89\xfb\x73\xe5\xeb\x42\x51\x6f\x4a\x10\xa4\x7d\x4e\xa4\x45\x5a\x43\x37\xe7\xda\xf8\x5e\x43\xdf\x26\xda\x67\x34\x08\x7f\x98\xa8\xf0\xf8\x9d\xa2\x6a\xe8\xe3\x8f\xf8\x27\x75\x86\xee\x26\xea\xbf\xc6\xd3\x85\xb2\xff\x7b\xfc\xfd\xf0\xf7\xcd\xf8\xe6\xb3\x82\x06\x32\x30\x0d\x25\x21\xaf\xf6\x90\x85\xa5\xb5\xb6\x1c\x1f\xdd\x2a\x9f\xc6\x8b\xa9\x86\x1c\x48\xca\x03\xb6\xbb\x1d\x01\xfe\xce\x68\xe4\x91\xb5\x61\x63\xc6\x4e\xf3\xc9\x33\x4d\x0f\xea\x18\x4a\x1f\x7b\xd8\xf0\x89\x87\x1e\xb0\xf7\x04\xb5\xdc\xbd\x7c\x7d\x2a\x4e\x1b\x59\xad\x88\xd1\x38\xd0\x58\x6b\x8c\x33\x07\x46\x3f\xe0\xce\x42\x48\xe4\xa8\x4b\xa2\x72\x15\x4a\xbe\xa2\x9e\x49\xbc\x57\x08\x56\xc8\x1a\xa0\x66\x57\x7d\x80\x22\x58\x32\x89\x8f\x2d\x9b\xa1\xff\x32\xea\x2c\xc5\x51\xb1\x89\x09\xcf\x36\x1d\x95\x58\x6b\x1c\x15\x48\xe7\x0e\x48\x4e\xe4\x69\x24\xac\x6f\x30\xdb\xf0\x73\x9a\x93\x77\x3d\xf2\x60\xd1\x1d\xd3\xa5\x0f\xc6\x41\xf2\xb0\xc3\x70\xc4\x8f\x61\x5a\xf6\x7e\x24\xc5\x78\x9e\xb3\x70\x48\x4b\x35\x79\xc3\xa6\x8c\xc7\x26\x01\xdb\xef\x09\x25\xff\x8c\x47\x60\xbb\x90\x3d\x14\xc9\xee\x5c\xb3\xb2\xec\xbe\x90\xe2\x3f\xb7\x2e\xf5\x20\x2c\xfa\x03\xe4\x03\x10\x15\xb0\x0c\xf2\x25\x45\x81\xf0\x01\xb7\x05\x14\xca\xad\xc8\x15\x21\xba\x4b\xa9\xcd\x5f\x0d\xb6\x45\x1d\x44\x04\xb9\x0e\x97\xe1\xed\x25\xde\x83\x48\x64\x8b\x1f\x75\xff\x11\x38\xc0\xd7\x99\xf5\xa7\x28\x25\xae\xe5\x43\xda\x5c\xec\xf9\x96\x61\xb9\xb8\x79\x66\xe3\x1b\x39\xf0\x1c\x1f\x54\xf5\x17\x5e\x4e\x21\x75\x03\xd0\xec\x3e\x55\x6a\xe3\xa5\x76\xad\x5a\x40\xd1\xec\x9b\xaa\xdc\x82\x6d\x09\xe2\xf1\x54\x53\xee\x6b\x02\xde\xeb\x96\x88\x9f\x59\xa6\x14\x4b\x6b\x95\x5a\xdc\x85\x73\xaf\x7c\x8a\x20\x45\x32\x61\xc7\x64\x44\xc0\xc2\x2d\xe9\x99\x3b\x52\xf4\x13\xa3\x3b\xcf\x20\x49\xad\x0b\xd8\x3f\x61\xaa\x0e\xf4\x04\x05\x89\x0a\x6f\x45\x1a\x5e\x8b\xc4\x20\x32\x53\x95\x1a\xaa\x64\xe1\x39\xe4\x20\xf2\xaf\x59\x7a\x90\x58\x79\x29\x82\xa8\x09\xf6\x99\x14\x21\xb1\x56\x24\x09\xd1\x03\x25\x34\x91\x7a\xa4\xc5\xca\x4d\xaa\x35\xed\x60\xe5\xc6\x2c\xee\xc7\x24\xed\x5e\x55\x26\x29\x27\x05\xae\xec\xc1\xb4\xb8\x73\xc1\xc2\x17\x51\xd4\xf5\xfd\x2d\x7d\x1b\x74\x40\xc4\x79\x20\x36\x38\xc5\x1b\x60\x61\x19\xba\x28\x18\xb6\x05\x8b\x5b\xe0\x5a\xc1\x52\x10\x05\xd1\x32\xb3\xd6\x0e\xf6\x77\xa0\x9a\x13\xf6\x77\x97\xa7\xff\xfe\xcf\x81\x8d\xff\xf7\x7f\x1e\x1f\x83\x44\xae\x9d\x23\x5b\xaa\x87\xbb\x42\x91\xbb\xf7\xba\x1c\x08\x43\x29\xbb\x1f\x74\x15\xd5\xc4\xc8\x20\x9c\xfa\x12\x12\x67\xb2\x20\x73\x57\x50\xc0\x6b\xce\x10\x0f\x2f\x58\xfc\xf2\xc4\xc6\x2b\xbd\xf1\xd1\xfb\x32\x53\xa7\xb2\x7d\x1e\x45\xf2\x37\xb3\xe9\xe2\x4e\x0d\x72\x1a\x9c\x8b\x08\x67\xde\xd2\xd6\x22\x3d\x01\xb7\x86\x42\xb8\x69\xd5\xc2\x21\xe1\x3f\x3e\x92\x5b\x0c\x35\xb8\xa2\x5e\x85\x43\x21\x74\x3b\xd6\xc6\x12\x88\x13\x75\xae\xc0\xae\x32\x51\xb5\x59\xe1\x28\x28\xdc\x36\xe6\xa8\xdb\x19\xe8\x96\x63\xf9\x16\x0c\x38\x2c\xd4\x75\xc6\x7e\xd9\x9d\x1e\xea\x0c\xcf\x07\x97\xfd\xf3\xcb\xfe\xf0\x0a\x0d\xde\x8c\x06\xc3\xd1\xf9\xf0\xec\xf5\xd5\xc5\xf0\xcd\xb0\x7f\xfe\xb6\x03\x4e\x57\xd2\x3e\x04\xed\x26\x79\xcc\x86\x60\x09\xe1\xa1\x96\x59\x6e\xe9\x72\x38\x1c\xd4\xb1\x74\xa1\xef\x60\x8e\x4a\xd8\x0e\xcc\xea\xf9\x63\x94\x72\x7b\x6f\xaf\x5e\xbf\x8b\xed\x09\xd2\x51\x7a\x3e\x54\x25\x1f\x47\x9d\x9d\x05\x65\x26\xd1\x3b\x57\xa6\xca\x8d\x96\x3a\x9a\x3c\x83\x49\xb1\xf4\x24\xa9\x87\x06\xbd\xe8\x1c\x52\x0e\x97\x77\x48\x54\x07\xad\x40\x2d\xef\x94\xa5\x01\xb5\x15\x06\xde\xe3\x53\x55\x6f\xc6\x6a\x22\x71\xe5\x74\x58\x27\x8d\x82\x99\xaa\x81\x90\x57\x1a\x26\x8e\x0f\x7a\xdd\xbe\xb5\x89\xb0\xcb\xd8\xbb\x4e\xe0\x85\x5d\x6a\xfd\x90\xe4\xc8\x4f\x77\x7f\x92\xa7\x44\xe5\xcd\x4c\x9d\x6b\xf7\x63\x20\xc9\x5a\xdd\x6f\x61\x1b\xcc\xd9\x08\x1b\x89\xf1\xed\x6d\x4a\x3f\xd7\x0d\xf4\xe5\x7e\x72\x37\xbe\xff\x81\xfe\xa9\xfc\x40\x5d\xcb\xac\x7b\x20\xd3\x06\x94\x72\x93\x3c\x64\x15\x9c\xac\x0c\x54\x58\x43\x6d\x42\x15\x19\x2d\x03\x5b\xea\xa8\x14\xee\x72\xbf\xbb\x24\x98\x26\xea\xad\xf2\xfd\x98\x11\x2c\x7c\x30\xa5\x10\xa0\xf1\x07\xb2\xc5\x7c\xa2\xfe\x03\x2d\x7d\x8f\x10\xd4\x8d\x85\x7b\x85\x89\x87\xe7\x6a\x30\xb8\x35\xe7\x67\x38\x06\x56\x72\x32\x3f\x3c\xf2\x7c\x8b\x76\xc4\xe6\xbc\x8b\xf4\x55\xf3\x2f\x37\xa7\xf6\x8a\x23\x29\xb7\xce\x75\x12\x34\x73\xe1\xfa\xb3\xfd\x5e\xa8\x13\x60\xf0\xd8\xfd\x9c\xf2\x34\x88\xe4\xf3\x52\xc6\x7f\xde\x61\x72\x2f\xf9\x52\x24\x72\xfd\x30\x32\x34\xea\x34\x8c\x06\x55\xdd\x3d\x1c\x5a\xf5\xb8\xe7\xe1\x12\x08\xd4\xd5\xdd\x76\x50\xc4\x9a\xd3\x40\x04\xd3\xdd\x51\xb8\xf8\x70\x60\x12\x6f\x09\x4e\xac\x59\xf0\x2e\x1c\x09\x28\x7b\x3a\x59\x84\x04\x31\x0c\x38\x82\x36\x80\x28\x86\x72\xd0\x78\x6c\x62\xca\x93\xb0\xff\x7e\x08\x56\x1a\xcf\x43\x56\x79\x1a\x40\xf2\x69\x34\xe3\x31\xdf\xbf\x74\xcc\xdb\x71\xb2\x60\xa1\x1a\x81\xf2\xdc\xf5\xa3\x74\xf9\xcd\x15\xc0\x41\xe3\xf1\xa5\x2c\x29\xdb\x68\x5e\x2f\x0c\x8e\x20\x1c\x5f\x32\x68\x36\xe2\x52\x73\x69\xa0\xfb\x2b\x14\xd9\x06\x20\x12\xac\x81\xa4\xe9\xb2\x29\xb3\x24\xf7\x5f\x9a\x84\x78\x0b\x09\xf4\x05\xa7\x86\x0d\x15\x53\xa9\x0d\xe9\x0e\x16\x08\x49\xdc\x8e\x5f\xeb\x40\xe5\xfe\x36\x40\x2b\xbe\xf3\x0c\x49\xf9\x65\x2f\x59\x1d\x45\xbb\x65\x93\x31\x74\x0c\x3d\x8a\xd5\xe5\x2e\x3c\xb4\x9d\x84\xc2\x05\x0b\x29\x98\xdc\x03\xd5\xa1\xa5\xee\xbb\xbc\x50\x6e\xd2\x37\x6c\x64\xb8\x52\xb2\xd5\x21\xf1\xee\xf2\xbc\x10\x36\xee\x35\x22\x19\x48\xde\x43\xd5\xd1\x26\x13\xc7\x0b\x21\xdc\x7f\x0d\x93\xa1\x12\x0e\x91\x59\xd5\x87\x53\xb5\xf6\x09\x22\x6f\x8b\xdb\x03\xd6\xa5\x89\xac\xd2\x6c\x6f\xd0\x0a\x4f\x94\x19\xac\x82\xa8\x56\xfb\x92\x33\xd6\xd6\xe6\x59\x34\x53\x09\x89\x7c\x0b\x4d\xf7\x9b\xed\x17\x58\xd1\xda\xd1\xbd\x2f\x08\x9b\x64\xdf\x54\x24\x63\xbc\xbe\xa4\xf4\x67\x43\x19\x28\xb1\x20\x6d\x5e\xba\xdd\xe4\xe2\x4d\xff\xc3\x07\xd4\x61\xd4\x86\x46\x80\x05\xd7\xeb\x82\x9c\x74\x46\xa3\xe0\x3b\xf0\xe9\x69\x0f\x89\x05\x0d\x6a\x56\x13\xb4\x18\xdb\x11\x4f\x2c\xba\xa4\xbb\xf5\xc6\xaf\x64\x3e\x23\x5a\xee\x40\x46\x34\xe7\xc2\x29\xfa\xf6\x59\xb9\x57\xa2\x02\x44\xef\xd1\xc5\x45\x2a\x7d\xa2\x2b\xfd\xc8\xa0\x5b\xd7\x26\x3e\x09\x33\xf1\x57\x00\x00\x00\xff\xff\xbf\xc3\xb7\xc7\xff\x2f\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 12287, mode: os.FileMode(420), modTime: time.Unix(1467151922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1460062807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x7b\x8a\x1b\x15\xe9\x13\x74\x12\x1b\xa4\x4b\x2a\xd5\x82\x5b\x48\xdb\x60\x6e\x30\x17\x92\x03\xe9\xdb\x2b\x3a\xd8\xda\xc5\xf5\xf8\xf8\xfe\xfb\x8a\x02\x77\x77\xba\x25\x2b\x0e\xbb\x08\x70\x68\xd5\xfe\xa2\xb0\xd6\x95\xba\xa2\xe7\x68\xfa\xc9\x78\xa6\x11\x1b\x8d\x9e\xb2\x70\x9a\x0c\x47\xf7\xe2\x89\x83\x89\x36\x09\x0d\x14\x6d\x90\x8c\xdd\xb9\xd6\x47\xec\x25\x39\x87\x9b\x35\x4b\xe3\xb6\xfc\xd1\xcb\x47\x2f\x4b\xbd\x24\x1b\xb2\x1d\xfe\x1c\x98\xd3\xef\x09\x98\x27\x55\xfc\x08\x00\x55\xdb\x9c\xd6\x49\xe5\xe2\xfe\xfd\xa5\x84\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1460062807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\xbd\x35\x11\xf4\xd0\x6b\x73\x72\x9d\xad\x1a\xc9\xb1\xc1\x59\x03\x3d\x45\x51\x62\x15\x4b\x25\x81\x38\xfc\xbd\x3d\x56\x29\x3f\x52\x05\x48\xf8\x36\xa3\xb1\xbf\xf1\xee\x7c\x0e\x67\x77\x7e\x37\x36\x93\x03\x7b\xcf\x84\x41\x4e\x08\x15\x5e\x5a\x54\x02\xe1\xd6\x87\x69\x18\x5f\xeb\xa6\x6d\x87\xc7\x7e\x0a\xb5\xef\xea\xe0\x1e\x18\xc4\x53\x11\x37\x04\xd7\x05\x6d\x60\x71\x30\x0a\x15\xaf\x97\xa8\x08\x56\xdb\xa3\xa5\x34\x94\x85\xba\xe2\xd2\xe2\xa7\xe6\x37\x5f\x5a\x70\xb1\x41\x58\x64\xac\x42\x89\x82\x20\xb8\xe9\xa9\xd9\x27\xb3\x1f\xb8\xb3\x73\x48\x8e\xc9\xf8\x4c\xe2\xbb\x14\xd6\x46\x97\x27\x35\xd3\x34\x63\x5c\x12\x1a\x20\xbe\x92\x08\x5a\xc9\xed\x49\x08\xde\x13\x42\x4b\x5b\x2a\xf0\x5d\xfc\x35\x41\x8e\x6b\x6e\x25\x41\xef\x5e\x7e\x6f\xb2\x5c\x8e\x6e\xd7\xee\x9b\x10\x22\x8b\x7d\x1f\x63\x3e\x3c\xf7\xff\xa0\xe7\x46\x5f\x7c\xe0\x33\x76\x50\x7f\xad\x21\x63\x6f\x01\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1467151916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

