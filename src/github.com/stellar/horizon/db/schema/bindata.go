// Code generated by go-bindata.
// sources:
// migrations/1_initial_schema.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x82\xe8\x3f\x76\x70\xce\x5d\x8b\x1e\x8a\x5e\x82\x16\x70\x13\xf5\x6a\xac\x23\xb7\xb6\xbc\x6d\xb1\x58\x08\xb4\x44\xdb\xda\x48\xa2\x4a\x4a\x79\x74\xb1\xdf\x7d\x87\x7a\x59\x2f\x8a\x72\x22\x65\x8b\x02\xad\xc5\xe1\xcc\xfc\xe6\x4d\x4a\x67\x67\xe8\x5f\x9e\xb3\x63\x38\x24\x68\x1d\x9c\x9c\x9d\xc1\x5f\xf4\x99\xf2\x70\xc7\xc8\xea\xcb\x1c\xd9\x38\xc4\x1b\xcc\x09\xb2\x23\x2f\x5e\x3e\x59\x69\x06\xe2\x21\xd0\x7b\xc4\x0f\xcd\xd0\xf1\x08\x8d\x42\xf4\x0e\xbd\xbc\x88\x97\x5c\x6a\xdd\xd4\x9f\x5a\xae\x23\xa8\x89\x6f\x51\xdb\xf1\x77\xb0\x30\x5a\x1b\x1f\xdf\x8e\x2e\x32\x76\xbe\x8d\x99\x6d\x5a\xd4\xdf\x52\xe6\x01\x85\xc9\x43\x06\xff\x70\xa0\xa4\x7e\xca\x63\x4f\x80\xf5\x36\xf2\xad\xd0\xa1\xbe\xb9\x01\x4e\x44\xac\x6f\xb1\xcb\x49\x49\x0c\x30\x30\x3d\xc2\x39\xde\xc5\x04\x77\x98\xf9\xc0\xeb\xe2\x24\x85\xa7\x63\x8f\x9c\xa3\xc0\x0d\x76\xfc\x87\x7b\x81\x8c\x87\x00\x7e\x6a\xdf\x0c\x4d\x5f\xcd\x16\xfa\x05\x5a\x81\x24\x0f\x9f\xa3\xb3\x0b\xb4\xb8\xf3\x09\x83\xff\xc5\xc8\x2f\x97\xda\xd4\xd0\x0e\x94\x68\xf6\x11\xe9\x0b\x03\x1e\xcc\x56\xc6\x2a\x63\x88\xbe\xce\x8c\x4f\x68\x75\xf9\x49\xbb\x9e\xa2\x60\x67\x5a\x60\x41\x97\x0a\xe9\x25\xf1\x07\x2e\x15\x45\x2e\x17\xd7\xd7\x9a\x6e\xb4\xa8\x91\x10\x20\xd8\x5a\x63\x82\x66\x2b\x34\xfa\x3c\xff\x4f\xb0\x13\xce\x0b\x18\xb5\x88\x1d\x31\xec\x22\x17\xfb\xbb\x08\xec\x31\xaa\xea\xb1\xe7\x21\x65\xa4\x3f\x2b\x24\xfc\xca\x46\x88\x36\xae\x63\xc9\x0d\x50\x56\xe1\x71\xf8\x53\xb1\x02\xbe\x08\x59\x14\x02\x2f\x04\xb1\x84\xc4\x73\x11\x71\x9c\x84\x1c\xd1\x2d\x1a\xdf\x90\x87\x09\xba\xc5\x6e\x44\x4e\x51\x80\x1d\xc6\x63\x93\xc4\x61\x48\x30\xb3\xf6\x66\x80\xc3\x3d\x44\x4d\xa2\xf5\xa4\xec\x42\x41\x66\x93\x2d\x8e\x5c\x08\x7d\xbc\x71\x09\x0f\xb0\x45\x44\x38\x8f\x2a\xab\x77\x4e\xb8\x37\xa9\x63\x17\x22\xb4\x6c\x77\x47\x68\xf6\x60\x62\xcb\xa2\x91\x1f\xf2\x0c\xbe\x31\xfd\x30\xd7\x0e\xe0\x53\xdb\xe5\x16\x00\xb2\x5c\xec\x79\xd1\x1f\xf1\xbe\x1a\x57\x34\x3e\x41\xf0\xc7\xb1\xd1\xc6\xd9\x39\x7e\x18\x7b\x4a\x5f\xcf\xe7\x93\xf8\x39\xb6\x6d\x06\x79\x02\xa9\x85\x19\xb6\x42\xc2\xc0\x30\xec\x01\xcc\x35\x7e\xf3\xdf\xd3\x93\xd3\x5a\xac\xa4\xdc\xc9\x76\x4b\xac\xbe\x55\x4e\x99\xa6\x1a\x57\x80\x98\x32\x04\x19\x1d\x0d\x08\xd4\x30\x51\x17\x64\x94\x2f\x28\xb3\x09\x7b\x81\x60\x85\xec\x00\x69\x79\x35\x8e\x97\xe6\x25\x9b\x84\xd8\x71\x39\xfa\x83\x53\x7f\x23\x37\x8a\x4b\x6c\xd8\xdb\xb3\x51\x52\xa6\xa9\x51\x38\xf9\x11\x41\x09\x95\x29\x9a\x10\x9b\x7b\xcc\xf7\xcd\x1e\xad\xd0\x07\x8c\xdc\x3a\x34\xe2\xa6\x72\x63\x6a\x23\x86\x7d\x8e\x93\xea\x1b\x7b\x25\xd7\xe3\x4a\xfb\x38\x5d\xcf\x0d\xf4\xb2\x22\xe1\xe0\x95\x6e\xf4\x96\x4b\x39\xb1\x4d\x1c\x22\xd1\x41\xa0\x2d\x78\x01\x12\x89\x24\x7a\x89\x78\x82\x7e\x52\x9f\x54\xf7\x30\x02\xcd\x48\xb5\x29\xa1\x8d\x02\xbb\x33\x6d\x1e\x47\xe9\x4f\x2f\xa0\x0c\xcc\x62\xde\x82\x3f\x00\x51\x0d\xcb\xab\x6a\x44\x51\x28\x1a\x80\xdb\xf1\x79\x73\x40\x6e\x09\x31\x03\x4a\xdd\xe6\x55\xd1\x74\x4d\x20\x91\xf8\x3a\x5e\x86\xdc\x25\xec\x56\x46\xe2\xe1\x7b\x33\xbc\x37\xa1\xf0\x99\xdc\xf9\x59\xa7\x92\x87\xf2\xc1\x6d\x01\x66\xa1\x63\x39\x01\xee\xbd\x42\x35\xcb\x38\xd4\xab\x66\x4c\xdd\xd3\x5d\x5d\x40\x8e\xc5\x0f\x2c\xc0\x98\x3f\x32\x33\xac\xb4\x2f\x6b\x4d\xbf\x6c\xb1\x44\x11\x7c\x46\xdd\x4d\x46\x8c\x60\x65\x4c\x97\x46\xd2\x48\x5f\xc5\x0f\x66\x3a\x30\x8b\x5b\xdf\x87\xef\xe9\x23\x7d\x81\xae\x67\xfa\xaf\xd3\xf9\x5a\xcb\x7f\x4f\xbf\x1d\x7e\x5f\x4e\xa1\x05\xa3\x57\xbd\x00\x45\x8b\xaf\xba\x76\x05\xb2\x15\x88\xa7\x73\x43\x5b\x1e\x09\x38\xe7\xad\x20\xff\xb7\x63\x2b\xb1\x0c\x15\xa8\xaa\x66\x5a\x2c\x8f\xd2\x86\x1b\x04\xa0\x43\x82\x2b\xee\x47\x4f\x6c\x47\xc9\x23\x4e\x23\x66\x91\x2c\xd4\x25\xb5\x3f\xab\x53\xa3\xd1\xf9\x79\x8d\xa2\x43\x52\x14\xe1\x0d\x57\x16\x64\x52\x54\x85\xa1\xb8\xaf\x73\x03\x6c\x37\xd8\xd0\x6d\xe6\x78\x53\xf7\x5b\x81\x14\x52\x9e\xab\x06\x1d\x09\xf6\x89\x55\x48\x21\xad\x5e\x87\x64\x1b\x5a\x2a\x51\x61\xcb\x70\xd9\x91\x65\xc4\xa3\x02\x3f\x1d\xf8\x14\xf3\x64\xd7\x62\x75\x4c\x1a\x65\xed\x38\x17\x2d\x1f\x8d\xb0\x34\xd9\x65\x63\xe5\x3f\x32\x18\xc2\x88\x45\xfc\x5b\xe2\x82\x52\x28\x24\xf7\xb5\xae\x70\x2f\xc6\x34\x38\x11\x4a\x16\x3d\x22\x4e\xab\x8d\x4b\xc2\x0a\xb2\x65\xee\xec\x7c\x1c\x46\xc0\xba\xc1\xec\xff\x7b\x73\xfa\xdb\xef\x87\x82\xff\xe7\x5f\x4d\x25\x1f\x28\x2a\xf3\x22\xf1\xa8\x19\x37\x9e\x7a\x7b\xc8\x79\xf9\x60\x86\xd6\x06\x72\xe0\x55\x67\x93\x22\x03\x73\x9a\x1b\x70\x1c\x9c\x8d\xc1\x8a\x6f\x21\x80\x77\x49\x31\x2c\x26\x13\xa4\x57\x9a\x3a\xa9\xec\x4e\xf9\x9e\xa4\xcb\x42\x9f\xab\x06\x09\x94\xd0\x5f\x2e\xe6\xeb\x6b\x5d\xb8\x54\x9c\xdd\x33\x94\x3e\xd8\xfb\x16\xbb\xe3\x51\xa7\xd9\x05\xcc\xc1\xc8\xce\x72\x31\xe7\xb5\x8a\xde\x1b\x0a\x69\x5f\x3c\x0a\x87\xa2\xfa\xb5\x21\x51\x98\x22\xb8\x21\x0f\x87\x1b\x1c\x7d\x65\x2c\xa7\x33\xbd\x05\x6d\xbd\xe0\x1d\xe9\xc0\x38\x94\xa6\x57\x57\x05\x69\x5d\x74\x44\x9f\x97\xb3\xeb\xe9\xf2\x3b\xfa\x45\xfb\x8e\xc6\x8e\x7d\x7c\x0f\x1e\x10\xa9\x4c\x66\x1b\xd6\x56\x3d\x95\x68\x37\xf9\x01\x29\x83\x34\xd3\xaf\xb4\x6f\x8f\x68\x54\xf1\xbe\x02\x3f\x71\x3d\xd7\xd8\xb6\xd6\xab\x99\xfe\x7f\xb4\x09\x19\x9c\x6d\xc7\x29\xf1\xa4\xd6\x17\x9a\x34\x15\xed\xad\x37\x35\xe3\x5e\xd9\x49\xc7\x6a\x87\x6d\x52\x2d\x69\xa8\xbd\x29\x97\xb0\xeb\xa6\x5e\xa5\x97\x4f\xea\x6d\xbb\x31\xc6\x4d\xa8\xc1\x0f\xc9\xfa\x53\xd5\x5e\xeb\x33\x98\xb2\x52\xed\x2b\xbc\x8b\x18\xb2\x1b\xbe\x92\xfa\x4d\x27\xfa\x49\x76\x59\x27\xd3\xfc\x50\x56\xfb\xd4\x19\xaa\x67\x57\x6d\x0f\xb7\x0a\x93\xc6\x3b\x09\x05\x02\x1a\x98\xc1\x20\x20\x52\xc6\x45\x1c\x92\xfe\xf7\x28\x58\x75\x34\xf9\xe5\x21\x38\xbc\x6f\x40\x65\xde\x45\x4c\xd9\xb5\x68\x09\x44\xb3\x7a\xc5\xec\x1d\x44\xc7\x9a\x80\x6e\x69\xdb\xa0\xad\xe3\xdb\xe4\xde\xac\x5e\xe1\x9b\xc0\x37\xbd\xa7\xef\x55\x75\xa5\xb4\x22\x8e\xfc\x7d\x42\xb9\x7a\x27\x84\x47\x00\xe9\xd9\xfc\x6d\x82\xd4\xea\x2b\x5d\x90\x96\x00\xc1\x4f\xcc\xc5\xfd\x94\xf7\x56\x11\xca\x02\x24\x88\x14\x5a\xa7\xc9\x21\x58\xe6\xf7\xe9\x43\xa8\xde\x24\x47\x99\xa4\x39\x65\x77\x10\x83\xc6\x4c\x49\xce\x63\x4a\x8c\x9c\x5d\xe5\x85\xc1\xc0\x2e\xa8\xbd\x9f\x50\x62\xa9\x6c\xe8\x8e\xac\xf0\xba\xe8\x79\x3c\x53\x7c\x3f\xa5\x82\x55\xa0\xed\x8e\xa8\xe9\x4d\xd8\xf3\x40\x6b\x7c\x07\xa7\xc2\xd8\xb4\xa9\x3b\xd8\x6c\x52\x7c\x1e\x80\xf9\x45\x8f\x0a\x94\x74\xf2\x2f\xb3\x3e\x5c\xc7\x0f\x5e\x1b\xaa\xa2\x1a\xa7\xaa\x63\x2b\x44\x99\x69\xf9\x9d\xc1\x10\x25\xa2\x4d\x5e\x17\x40\xe5\x1d\xc7\x81\x1b\xa8\x67\xd6\xa5\x74\x02\xa2\xee\x9c\xd2\xb3\xb4\x18\x8a\xfa\x3c\x26\x1f\x2d\x56\x32\x53\xb6\x8c\xf4\xe9\xc6\x27\x20\xae\x9e\x7b\x9f\x1b\x7a\xed\x66\xfb\x68\x1b\x34\x9e\xdc\xbb\x59\x63\xf8\xea\x52\x17\xf6\xe8\x83\x03\x10\xdb\x24\x1f\x25\xb3\xa3\xb7\xb9\xa1\xf4\xa6\x1f\xa7\xb5\x08\x50\x4e\xac\xe3\x71\xf6\xc6\xf2\xec\xfd\x7b\x34\xe2\xd4\x85\xf1\x8f\x8b\xaf\x12\x44\x46\x8e\xce\xcf\xc5\xed\xf6\xe9\xe9\x04\xc9\x09\x2d\x6a\x77\x23\x74\x38\x8f\x08\x93\x93\x6e\x68\xb4\xdb\x87\x9d\xc4\x97\x48\xdb\x15\x28\x91\x56\x54\x38\x45\x5f\x3f\x69\x4b\x2d\x29\x3f\xe8\x1d\x7a\xfd\xba\xe0\x3d\xd9\x77\x96\xc8\xa2\x5e\xe0\x92\x90\xc4\x9e\x28\x7e\xa2\x79\x45\xef\xfc\x13\x9b\xd1\x00\xc5\x5f\x9f\x35\x87\x8b\x85\xb9\x05\xfe\xba\x50\x10\x96\x13\xa7\x6d\x53\xa1\xa4\x76\x22\xeb\xce\x39\x9b\x04\xda\x68\xb2\xa8\x6a\xa3\xc9\x0f\x78\x39\xd1\xdf\x01\x00\x00\xff\xff\x17\xb7\x7d\x3e\xd9\x2a\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10969, mode: os.FileMode(420), modTime: time.Unix(1453323370, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

